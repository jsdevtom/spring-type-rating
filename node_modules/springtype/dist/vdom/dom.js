"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.ATTR_DEBUG_PREFIX = exports.ATTR_EVENT_LISTENER_PREFIX = exports.DISABLED_ATTRIBUTE_NAME = exports.LIST_KEY_ATTRIBUTE_NAME = exports.ID_ATTRIBUTE_NAME = exports.XLINK_ATTRIBUTE_NAME = exports.CLASS_NAME_ATTRIBUTE_NAME = exports.TABINDEX_ATTRIBUTE_NAME = exports.STYLE_ATTRIBUTE_NAME = exports.CLASS_ATTRIBUTE_NAME = exports.FRAGMENT_ELEMENT_NAME = exports.DEFAULT_SLOT_NAME = exports.TEMPLATE_ELEMENT_NAME = void 0;
var render_1 = require("./render");
var is_primitive_1 = require("../lang/is-primitive");
var st_1 = require("../st/st");
var iattributes_1 = require("./interface/iattributes");
exports.TEMPLATE_ELEMENT_NAME = "template";
exports.DEFAULT_SLOT_NAME = "default";
exports.FRAGMENT_ELEMENT_NAME = "fragment";
exports.CLASS_ATTRIBUTE_NAME = "class";
exports.STYLE_ATTRIBUTE_NAME = "style";
exports.TABINDEX_ATTRIBUTE_NAME = "tabindex";
exports.CLASS_NAME_ATTRIBUTE_NAME = "className";
exports.XLINK_ATTRIBUTE_NAME = "xlink";
exports.ID_ATTRIBUTE_NAME = "id";
exports.LIST_KEY_ATTRIBUTE_NAME = "key";
exports.DISABLED_ATTRIBUTE_NAME = "disabled";
exports.ATTR_EVENT_LISTENER_PREFIX = "on";
exports.ATTR_DEBUG_PREFIX = "__";
var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
var STANDARD_HTML_PASS_ATTRIBUTES = [
    exports.CLASS_ATTRIBUTE_NAME,
    exports.STYLE_ATTRIBUTE_NAME,
    exports.ID_ATTRIBUTE_NAME,
    exports.TABINDEX_ATTRIBUTE_NAME,
    exports.LIST_KEY_ATTRIBUTE_NAME,
    exports.DISABLED_ATTRIBUTE_NAME
];
if (!st_1.st.dom) {
    st_1.st.domImpl = st_1.st.globalThis.window || {
    // TODO: Impl. compat document.* API 
    };
    // DOM abstraction layer for manipulation
    st_1.st.dom = {
        setDomImpl: function (domImpl) {
            st_1.st.domImpl = domImpl;
        },
        isReady: function () { return __awaiter(void 0, void 0, void 0, function () {
            var document;
            return __generator(this, function (_a) {
                document = st_1.st.domImpl.document;
                if (document.body)
                    return [2 /*return*/, Promise.resolve()];
                return [2 /*return*/, new Promise(function (resolve) { return document.addEventListener("DOMContentLoaded", function () { return resolve(); }); })];
            });
        }); },
        hasElNamespace: function (domElement) {
            return domElement.namespaceURI === SVG_NAMESPACE;
        },
        hasSvgNamespace: function (parentElement, type) {
            return st_1.st.dom.hasElNamespace(parentElement) && type !== "STYLE" && type !== "SCRIPT";
        },
        createElementOrElements: function (virtualNode, parentDomElement, detached) {
            if (detached === void 0) { detached = false; }
            if (Array.isArray(virtualNode)) {
                return st_1.st.dom.createChildElements(virtualNode, parentDomElement, detached);
            }
            else if (typeof virtualNode !== 'undefined') {
                return st_1.st.dom.createElement(virtualNode, parentDomElement, detached);
            }
            else {
                // undefined virtualNode -> e.g. when a tsx variable is used in markup which is undefined
                return st_1.st.dom.createTextNode("", parentDomElement, detached);
            }
        },
        getTagToUse: function (virtualNode) {
            // support for <component tag="h1"> and <div tag="h2"> cases
            if (virtualNode.attributes && virtualNode.attributes.tag) {
                return virtualNode.attributes.tag;
            }
            return virtualNode.type;
        },
        createElement: function (virtualNode, parentDomElement) {
            var newEl;
            // use DOM implementation provided instead of the globally infered one
            var document = st_1.st.domImpl.document;
            if (virtualNode.type.toUpperCase() === "SVG" ||
                (parentDomElement && st_1.st.dom.hasSvgNamespace(parentDomElement, virtualNode.type.toUpperCase()))) {
                newEl = document.createElementNS(SVG_NAMESPACE, virtualNode.type);
            }
            else {
                newEl = document.createElement(st_1.st.dom.getTagToUse(virtualNode));
            }
            if (virtualNode.attributes) {
                st_1.st.dom.setAttributes(virtualNode.attributes, newEl);
            }
            if (virtualNode.children) {
                st_1.st.dom.createChildElements(virtualNode.children, newEl);
            }
            if (parentDomElement) {
                parentDomElement.appendChild(newEl);
            }
            return newEl;
        },
        replaceElement: function (virtualNode, parentDomElement, oldDomChildElement) {
            var domElement = st_1.st.dom.createElement(virtualNode, parentDomElement, true);
            parentDomElement.replaceChild(domElement, oldDomChildElement);
            return domElement;
        },
        replaceTextNode: function (virtualElementTextContent, parentDomElement, oldDomChildElement) {
            var domElement = st_1.st.dom.createTextNode(virtualElementTextContent, parentDomElement, true);
            parentDomElement.replaceChild(domElement, oldDomChildElement);
            return domElement;
        },
        createTextNode: function (text, domElement, detached) {
            if (detached === void 0) { detached = false; }
            // use DOM implementation provided instead of the globally infered one
            var document = st_1.st.domImpl.document;
            var node = document.createTextNode(text.toString());
            if (!detached) {
                domElement.appendChild(node);
            }
            return node;
        },
        createChildElements: function (virtualChildren, domElement, detached) {
            if (detached === void 0) { detached = false; }
            var children = [];
            for (var _i = 0, _a = virtualChildren; _i < _a.length; _i++) {
                var virtualChild = _a[_i];
                if (is_primitive_1.isPrimitive(virtualChild)) {
                    children.push(st_1.st.dom.createTextNode(((typeof virtualChild === 'undefined' || virtualChild === null) ? "" : virtualChild).toString(), domElement, detached));
                }
                else {
                    if (render_1.isJSXComment(virtualChild)) {
                        continue;
                    }
                    children.push(st_1.st.dom.createElement(virtualChild, domElement, detached));
                }
            }
            return children;
        },
        setAttribute: function (name, value, domElement) {
            // don't render debug attributes like __source and __self
            if (name.indexOf(exports.ATTR_DEBUG_PREFIX) === 0)
                return;
            // attributes not set (undefined) are ignored; use null value to reset an attributes state
            if (typeof value === 'undefined')
                return;
            // save ref as { current: DOMElement } in ref object
            if (name === iattributes_1.REF_ATTRIBUTE_NAME) {
                value.current = domElement;
                return;
            }
            if (name.startsWith(exports.ATTR_EVENT_LISTENER_PREFIX) && typeof value === 'function') {
                var eventName = name.substring(2).toLowerCase();
                var capturePos = eventName.indexOf("capture");
                var doCapture = capturePos > -1;
                // onClickCapture={...} support
                if (doCapture) {
                    eventName = eventName.substring(0, capturePos);
                }
                domElement.addEventListener(eventName, value, doCapture);
                return;
            }
            // transforms class={['a', 'b']} into class="a b"
            if (name === exports.CLASS_ATTRIBUTE_NAME && Array.isArray(value)) {
                value = value.join(" ");
            }
            if (st_1.st.dom.hasElNamespace(domElement) && name.startsWith(exports.XLINK_ATTRIBUTE_NAME)) {
                domElement.setAttributeNS("http://www.w3.org/1999/xlink", render_1.tsxToStandardAttributeName(name), value);
            }
            else {
                if (name === exports.STYLE_ATTRIBUTE_NAME && typeof value !== 'string') {
                    for (var prop in value) {
                        domElement.style[prop] = value[prop];
                    }
                }
                else {
                    if (typeof value === 'boolean') {
                        domElement[name] = value;
                    }
                    else {
                        domElement.setAttribute(name, value);
                    }
                }
            }
        },
        isStandardHTMLAttribute: function (name) {
            // these attributes, set on a component (from the outside) will
            // always directly be set on component.el and the component will
            // not be notified using lifecycle methods
            // thus, these attribute names render pointless to be used
            // but this should be obvious too - just because of thier names nature
            return STANDARD_HTML_PASS_ATTRIBUTES.indexOf(name.toLowerCase()) > -1;
        },
        setAttributes: function (attributes, domElement, forceNative) {
            for (var name_1 in attributes) {
                st_1.st.dom.setAttribute(name_1, attributes[name_1], domElement, forceNative);
            }
        },
        /**
         * Removes the DOM element provided from it's parent.
         */
        removeElement: function (domElement) {
            if (domElement.parentNode) {
                domElement.parentNode.removeChild(domElement);
            }
        },
        /**
         * Removes all children of a DOM element.
         * Behaves the same like element.innerHTML = '';
         */
        removeChildren: function (domElement) {
            while (domElement.firstChild) {
                domElement.removeChild(domElement.firstChild);
            }
        }
    };
}
